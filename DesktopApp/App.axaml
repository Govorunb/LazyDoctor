<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="DesktopApp.App"
             xmlns:local="using:DesktopApp"
             xmlns:fas="using:FluentAvalonia.Styling"
             xmlns:conv="using:DesktopApp.Utilities.Converters"
             RequestedThemeVariant="Default">
             <!-- "Default" ThemeVariant follows system theme variant. "Dark" or "Light" are other available options. -->

    <Application.Resources>
        <conv:EnumDescriptionConverter x:Key="EnumDescriptionConverter" />
    </Application.Resources>
    <Application.DataTemplates>
        <local:ViewLocator/>
    </Application.DataTemplates>

    <Application.Styles>
        <!-- original Avalonia theme - we use FluentAvalonia instead
        <FluentTheme />
        -->

        <fas:FluentAvaloniaTheme PreferUserAccentColor="True" PreferSystemTheme="True" />

        <!-- <StyleInclude Source="Common/Styles.axaml" /> -->
        <Style Selector=":is(Button).Danger">
            <Setter Property="Background" Value="#ffDD0000" />
            <!-- there has to be a better way... really wish styles/templates/themes in avalonia worked better than this -->
            <Style Selector="^:disabled">
                <!-- ava button -->
                <Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">
                    <Setter Property="Background" Value="#808B0000" />
                </Style>
                <!-- FA command bar button -->
                <Style Selector="^ /template/ Border#AppBarButtonInnerBorder">
                    <Setter Property="Background" Value="#808B0000" />
                </Style>
            </Style>
            <Style Selector="^:pointerover">
                <!-- ava button -->
                <Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">
                    <Setter Property="Background" Value="OrangeRed" />
                </Style>
                <!-- FA command bar button -->
                <Style Selector="^ /template/ Border#AppBarButtonInnerBorder">
                    <Setter Property="Background" Value="OrangeRed" />
                </Style>
            </Style>
        </Style>

        <!-- FA command bar button -->
        <!-- adapted from https://github.com/amwx/FluentAvalonia/blob/d879f12a7dd8079193a9d1ae5560c071936c0fab/src/FluentAvalonia/Styling/ControlThemes/BasicControls/ButtonStyles.axaml#L83 -->
        <Style Selector=":is(Button).accent">
            <Setter Property="Foreground" Value="{DynamicResource AccentButtonForeground}" />

            <Style Selector="^ /template/ Border#AppBarButtonInnerBorder">
                <Setter Property="Background" Value="{DynamicResource AccentButtonBackground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource AccentButtonBorderBrush}" />
            </Style>
            <Style Selector="^ /template/ Viewbox#ContentViewBox > ContentPresenter#Content">
                <Setter Property="Background" Value="{DynamicResource AccentButtonBackground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource AccentButtonBorderBrush}" />
            </Style>

            <Style Selector="^:pointerover">
                <!-- <Setter Property="Foreground" Value="{DynamicResource AccentButtonForegroundPointerOver}" /> -->
                <Style Selector="^ /template/ Border#AppBarButtonInnerBorder">
                    <Setter Property="Background" Value="{DynamicResource AccentButtonBackgroundPointerOver}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource AccentButtonBorderBrushPointerOver}" />
                </Style>
            </Style>

            <Style Selector="^:pressed">
                <Setter Property="Foreground" Value="{DynamicResource AccentButtonForegroundPressed}" />
                <Style Selector="^ /template/ Border#AppBarButtonInnerBorder">
                    <Setter Property="Background" Value="{DynamicResource AccentButtonBackgroundPressed}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource AccentButtonBorderBrushPressed}" />
                </Style>
            </Style>

            <Style Selector="^:pressed">
                <Setter Property="Foreground" Value="{DynamicResource AccentButtonForegroundDisabled}" />
                <Style Selector="^ /template/ Border#AppBarButtonInnerBorder">
                    <Setter Property="Background" Value="{DynamicResource AccentButtonBackgroundDisabled}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource AccentButtonBorderBrushDisabled}" />
                </Style>
            </Style>
        </Style>

        <Style Selector="ItemsControl.Virtualizing">
            <Setter Property="ItemsPanel">
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter>
            <!--
            there doesn't seem to be a particularly good way to do this in selectors
            (to encompass both VirtualizingStackPanel and regular StackPanel)
            -->
            <Style Selector="^.Horizontal">
                <Setter Property="ItemsPanel">
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </Setter>
            </Style>
        </Style>
        <Style Selector="ItemsControl.Horizontal:not(.Virtualizing)">
            <Setter Property="ItemsPanel">
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter>
        </Style>
    </Application.Styles>
</Application>
